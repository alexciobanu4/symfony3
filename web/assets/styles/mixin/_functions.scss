/// Generates the color black, with, optionally, a set opacity.
///   .foo {
///     border-color: black(0.1);
///   }
/// @example css - Result
///   .foo {
///     border-color: rgba(0, 0, 0, 0.1);
///   }
@function black-bg($opacity) {
    @return rgba(0, 0, 0, $opacity);
}
/// Generates the color white, with, optionally, a set opacity.
///   .foo {
///     border-color: white(0.1);
///   }
/// @example css - Result
///   .foo {
///     border-color: rgba(255, 255, 255, 0.1);
///   }
@function white-bg($opacity) {
    @return rgba(255, 255, 255, $opacity);
}

@function blue-bg($opacity) {
    @return rgba(31, 76, 178, $opacity);
}
// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// =============================================================================
// REM Font Sizing with Pixel Fall Back
// =============================================================================
@function calcRem($size) {
    $remSize: $size / 16px;
    @return $remSize * 1rem;
}


@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
/**
 * Computes a CSS calc function that betweens a value from
 * A to B over viewport-width A to viewport-width B.
 * Requires a media query to cap the value at B.
 */

/************* EXAMPLE ********************
$small: 400px;
$large: 1000px;

.Container {
 The base (smallest) value.
  padding: 20px;
  /* In $small it should be 20px and in $large it should be 100px,
  /* In viewports between that its padding should be calculated
  @media (min-width: $small) {
    padding: between(20px, 100px, $small, $large);
  }

/* In $large we cap the value at 100px
  @media (min-width: $large) {
    padding: 100px;
  }
}
********************************************************/
@function between($to, $from, $toWidth, $fromWidth) {
  $slope: ($to - $from) / ($toWidth - $fromWidth);
  $base: $from - $slope * $fromWidth;

  @return calc(#{$base} + #{100vw * $slope});
}

//Example:
//padding: rem(250 25 10 50);
//margin: rem(10 20);
//font-size: rem(20);
// @function rem($values, $_base-fontsize:16px) {
//     $rem: ();
//     $px: ();
//       @each $value in $values {
//          $rem: append($rem, strip-unit($value) / strip-unit($_base-fontsize) + rem, 'space');
//          $px: append($px, strip-unit($value) + px, 'space');
//       }
//   @return $rem();
// }

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  }

  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline + 0rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}
